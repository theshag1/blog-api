from django.db import modelsfrom django.template.defaultfilters import slugify, randomfrom category.models import Categoryfrom users.models import Userfrom user_choices import InterestingChoices, InterestingChoicesDefoult# Create your models here.class TimestampModel(models.Model):    created_at = models.DateTimeField(auto_now_add=True)    updated_at = models.DateTimeField(auto_now=True)    class Meta:        abstract = Trueclass Blog(TimestampModel):    title = models.CharField(max_length=300)    slug = models.SlugField(unique=True)    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='user')    blog_body = models.TextField()    image_or_video = models.FileField(null=True)    category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name='category')    created_at = models.TimeField(auto_now=True)    blog_interesting = models.CharField(choices=InterestingChoices, default=InterestingChoicesDefoult)    def __str__(self):        return self.title    def save(self, *args, **kwargs):        self.slug = slugify(self.title)        slug = self.slug        while self.__class__.objects.filter(slug=slug).exists():            slug = f"{self.slug}-{random.randint(1, 100000)}"        self.slug = slug        return super().save(*args, **kwargs)    @property    def likes(self):        return self.like_dislike.filter(type=LikeDislike.LikeType.Like).count()    @property    def dislike(self):        return self.like_dislike.filter(type=LikeDislike.LikeType.Dislike).count()    @property    def comment(self):        return self.comment.count()class LikeDislike(TimestampModel):    class LikeType(models.TextChoices):        Like = '+'        Dislike = '-'    blog = models.ForeignKey(Blog, on_delete=models.CASCADE, related_name='like_dislike')    user = models.ForeignKey('users.User', on_delete=models.CASCADE, related_name='like_dislike')    type = models.CharField(max_length=40, choices=LikeType.choices)    class Meta:        unique_together = ['blog', 'user']    def __str__(self):        return f'{self.user}'class Comment(TimestampModel):    blog = models.ForeignKey(Blog, on_delete=models.CASCADE, related_name="comment")    user = models.ForeignKey("users.User", on_delete=models.CASCADE, related_name="comment")    body = models.CharField(max_length=1000000)    parent = models.ForeignKey('self', models.CASCADE, related_name='replies', null=True, blank=True)    def __str__(self):        return f'{self.user} : {self.body.split(".")[0]}'